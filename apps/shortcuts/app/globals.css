@import '@repo/ui/globals.css';
@import 'tailwindcss';

@source '../../../packages/ui/src/components/**/*.{ts,tsx}';

@custom-variant dark (&:is(.dark *));

@theme {
  --animate-slide-down-and-fade: slideDownAndFade 400ms
    cubic-bezier(0.16, 1, 0.3, 1);
  --animate-slide-left-and-fade: slideLeftAndFade 400ms
    cubic-bezier(0.16, 1, 0.3, 1);
  --animate-slide-up-and-fade: slideUpAndFade 400ms
    cubic-bezier(0.16, 1, 0.3, 1);
  --animate-slide-right-and-fade: slideRightAndFade 400ms
    cubic-bezier(0.16, 1, 0.3, 1);
  --animate-scale-in: scaleIn 200ms ease;
  --animate-scale-out: scaleOut 200ms ease;
  --animate-fade-in: fadeIn 200ms ease;
  --animate-fade-out: fadeOut 200ms ease;
  --animate-enter-from-left: enterFromLeft 250ms ease;
  --animate-enter-from-right: enterFromRight 250ms ease;
  --animate-exit-to-left: exitToLeft 250ms ease;
  --animate-exit-to-right: exitToRight 250ms ease;
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes slideDownAndFade {
    from {
      opacity: 0;
      transform: translateY(-2px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes slideLeftAndFade {
    from {
      opacity: 0;
      transform: translateX(2px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  @keyframes slideUpAndFade {
    from {
      opacity: 0;
      transform: translateY(2px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  @keyframes slideRightAndFade {
    from {
      opacity: 0;
      transform: translateX(-2px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  @keyframes enterFromRight {
    from {
      opacity: 0;
      transform: translateX(200px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  @keyframes enterFromLeft {
    from {
      opacity: 0;
      transform: translateX(-200px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  @keyframes exitToRight {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(200px);
    }
  }
  @keyframes exitToLeft {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(-200px);
    }
  }
  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: rotateX(-10deg) scale(0.9);
    }
    to {
      opacity: 1;
      transform: rotateX(0deg) scale(1);
    }
  }
  @keyframes scaleOut {
    from {
      opacity: 1;
      transform: rotateX(0deg) scale(1);
    }
    to {
      opacity: 0;
      transform: rotateX(-10deg) scale(0.95);
    }
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@plugin '@ban12/tailwindcss-safe-area';

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {
  a,
  input,
  button {
    -webkit-tap-highlight-color: transparent;
  }

  input[type='search']::-webkit-search-decoration,
  input[type='search']::-webkit-search-cancel-button,
  input[type='search']::-webkit-search-results-button,
  input[type='search']::-webkit-search-results-decoration {
    display: none;
  }
  :root {
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  :root {
    &:not([dir='rtl']) {
      --safe-area-inset-start: env(safe-area-inset-left);
      --safe-area-inset-end: env(safe-area-inset-right);
    }
    &[dir='rtl'] {
      --safe-area-inset-start: env(safe-area-inset-right);
      --safe-area-inset-end: env(safe-area-inset-left);
    }

    --container-inset-start: var(--safe-area-inset-start);
    --container-inset-end: var(--safe-area-inset-end);
    /*
    16 -> 1rem default use by padding inline
    lg 1024 * a - b = 16
    2xl 1536 * a - b = 140
    a=?
    b=?
    */
    @media (width >= theme(--breakpoint-lg)) {
      --container-inset: calc(24.21875vw - 232px);
      --container-inset-start: calc(24.21875vw - 232px);
      --container-inset-end: calc(24.21875vw - 232px);
    }
    @media (width >= theme(--breakpoint-2xl)) {
      --container-inset: 140px;
      --container-inset-start: 140px;
      --container-inset-end: 140px;
    }
  }
}

@layer components {
  .hidden-scrollbar {
    scrollbar-width: none; /* Firefox */
    &::-webkit-scrollbar {
      display: none; /* Safari and Chrome */
    }
  }
  .mask-image-paint-smooth-corners {
    mask-image: paint(smooth-corners);
  }
  .container-full {
    padding-inline: max(1rem, var(--container-inset-start))
      max(1rem, var(--container-inset-end));
  }
}
