name: Build and Deploy Docker Image

on:
  push:
    branches:
      - deploy/docker

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: cooda/ban12-site-shortcuts:latest
          file: apps/shortcuts/Dockerfile
          build-args: |
            "TURBO_TEAM=${{ vars.TURBO_TEAM }}"
            "TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}"
            "AUTH_SECRET=${{ secrets.AUTH_SECRET }}"
          no-cache: true

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_SHORTCUTS }}" > .env.shortcuts

      - name: Copy files via SCP
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_PROJECT_PATH: ${{ vars.VPS_PROJECT_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          tar -czf config.tar.gz .env.shortcuts docker-compose.yaml nginx
          scp -o StrictHostKeyChecking=no config.tar.gz $VPS_USER@$VPS_HOST:$VPS_PROJECT_PATH

      - name: Deploy to VPS
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd ${{ vars.VPS_PROJECT_PATH }}
            tar -xzf config.tar.gz
            rm config.tar.gz
            docker compose -f docker-compose.yaml pull
            docker compose -f docker-compose.yaml up -d --remove-orphans
            docker image prune --force
          EOF
